require 'ruby_wrapper'
require 'backpack_calendar'

class AccountUser < ActiveRecord::Base
  belongs_to :account
  has_many :backpack_reminders, :dependent => :destroy
  belongs_to :user, :dependent => :destroy
  
  def is_admin()
    (self.role == "Admin") ? true : false
  end
  
  def calendars()
    if (is_on_error())
      return false
    end
    
    @retry = true
    @maxretry = 10
    
    begin
      @calendarapi = calendar_connection()
      @return = @calendarapi.calendars
    rescue Exception => ex
      if (ex.message =~ /404/o)
        switch_ssl()
        if (@retry)
          @retry = false
          retry
        else
          errored_out("Error:SSL and non-SSL connections to Backpack have failed:sitename => #{self.account.backpack_sitename}:#{ex.message}")
        end
      elsif (ex.message =~ /403/o)
        errored_out("Error:API Key is probably invalid:sitename => #{self.account.backpack_sitename}:#{ex.message}")
      elsif (ex.message =~ /503/o)
        if (@maxretry == 0)
          errored_out("Error:Max retries reach:sitename => #{self.account.backpack_sitename}:#{ex.message}")
        end
        logger.warn("Warning:API request limit reached, sleeping for 5 seconds:#{ex.message}")
        @maxretry -= 1
        sleep 5
        retry
      else
        logger.error ex.message
        return false
      end
    end
    
    mark_out_of_error()
    @return
  end
  
  def calendar_events(calendar_id)
    if (is_on_error())
      return false
    end
    
    @retry = true
    @maxretry = 10
    
    begin
      @calendarapi = calendar_connection()
      @return = @calendarapi.calendar_events(calendar_id)
    rescue Exception => ex
      if (ex.message =~ /404/o)
        switch_ssl()
        if (@retry)
          @retry = false
          retry
        else
          errored_out("Error:SSL and non-SSL connections to Backpack have failed:sitename => #{self.account.backpack_sitename}:#{ex.message}")
        end
      elsif (ex.message =~ /403/o)
        errored_out("Error:API Key is probably invalid:sitename => #{self.account.backpack_sitename}:#{ex.message}")
      elsif (ex.message =~ /503/o)
        if (@maxretry == 0)
          errored_out("Error:Max retries reach:sitename => #{self.account.backpack_sitename}:#{ex.message}")
        end
        logger.warn("Warning:API request limit reached, sleeping for 5 seconds:#{ex.message}")
        @maxretry -= 1
        sleep 5
        retry
      else
        logger.error "Error:Unknown error:sitename => #{self.account.backpack_sitename}:#{ex.message}"
        return false
      end
    end
    
    mark_out_of_error()
    @return
  end
  
  def calendar_event(calendar_event_id)
    if (is_on_error())
      return false
    end
    
    @retry = true
    @maxretry = 10
    
    begin
      @calendarapi = calendar_connection()
      @return = @calendarapi.calendar_event(calendar_event_id)
    rescue Exception => ex
      if (ex.message =~ /404/o)
        switch_ssl()
        if (@retry)
          @retry = false
          retry
        else
          errored_out("Error:SSL and non-SSL connections to Backpack have failed:sitename => #{self.account.backpack_sitename}:#{ex.message}")
        end
      elsif (ex.message =~ /403/o)
        errored_out("Error:API Key is probably invalid:sitename => #{self.account.backpack_sitename}:#{ex.message}")
      elsif (ex.message =~ /503/o)
        if (@maxretry == 0)
          errored_out("Error:Max retries reach:sitename => #{self.account.backpack_sitename}:#{ex.message}")
        end
        logger.warn("Warning:API request limit reached, sleeping for 5 seconds:#{ex.message}")
        @maxretry -= 1
        sleep 5
        retry
      else
        logger.error ex.message
        return false
      end
    end
    
    mark_out_of_error()
    @return
  end
  
  def reminders()
    if (is_on_error())
      return false
    end
    
    @reminders = []
    @retry = true
    @maxretry = 10
    
    begin
      @backpackapi = backpack_connection()
      @my_reminders = @backpackapi.list_reminders()["reminder"]
      mark_out_of_error()
    rescue Exception => ex
      if (ex.message =~ /404/o)
        switch_ssl()
        if (@retry)
          @retry = false
          retry
        else
          errored_out("Error:SSL and non-SSL connections to Backpack have failed:sitename => #{self.account.backpack_sitename}:#{ex.message}")
        end
      elsif (ex.message =~ /403/o)
        errored_out("Error:API Key is probably invalid:sitename => #{self.account.backpack_sitename}:#{ex.message}")
      elsif (ex.message =~ /503/o)
        if (@maxretry == 0)
          errored_out("Error:Max retries reach:sitename => #{self.account.backpack_sitename}:#{ex.message}")
        end
        logger.warn("Warning:API request limit reached, sleeping for 5 seconds:#{ex.message}")
        @maxretry -= 1
        sleep 5
        retry
      else
        logger.error ex.message
        return false
      end
    end

    if (@my_reminders != nil)
      @my_reminders.each { |reminder|
        @reminders.push(Reminder.new(reminder))
      }
    end
    
    @reminders
  end
  
  def process_my_backpack_reminders(force_recreation = false)
    if (is_on_error())
      return false
    end
    
    @retry = true
    @maxretry = 10
    @calendar_event_ids = []
    @calendar_events = []
    initialize_regex()
    @reminder_pattern = Regexp.new(/\#rem\d+[a-z]+/io)
    
    begin
      @backpackapi = backpack_connection()
      @calendarapi = calendar_connection()
      @calendars = @calendarapi.calendars()
    rescue Exception => ex
      if (ex.message =~ /404/o)
        switch_ssl()
        if (@retry)
          @retry = false
          retry
        else
          errored_out("Error:SSL and non-SSL connections to Backpack have failed:sitename => #{self.account.backpack_sitename}:#{ex.message}")
        end
      elsif (ex.message =~ /403/o)
        errored_out("Error:API Key is probably invalid:sitename => #{self.account.backpack_sitename}:#{ex.message}")
      elsif (ex.message =~ /503/o)
        if (@maxretry == 0)
          errored_out("Error:Max retries reach:sitename => #{self.account.backpack_sitename}:#{ex.message}")
        end
        logger.warn("Warning:API request limit reached, sleeping for 5 seconds:#{ex.message}")
        @maxretry -= 1
        sleep 5
        retry
      else
        logger.error ex.message
        return false
      end
    end
    
    # For each calendar
    @calendars.each { |calendar|
      @maxretry = 10
      
      begin
        @calendar_events = @calendarapi.calendar_events(calendar.id)
      rescue Exception => ex
        if (ex.message =~ /503/o)
          if (@maxretry == 0)
          errored_out("Error:Max retries reach:sitename => #{self.account.backpack_sitename}:#{ex.message}")
        end
        logger.warn("Warning:API request limit reached, sleeping for 5 seconds:#{ex.message}")
        @maxretry -= 1
        sleep 5
        retry
        else
          logger.error("ERROR: Couldn't retrieve calendar events for AccountUser => #{self.id} Calendar => #{calendar.id}:#{ex.message}")
        end
      end
            
      # For each event in this calendar
      @calendar_events.each { |cal_event|
        
        # If the event has reminders defined store the event id for later
        if (cal_event.message =~ @reminder_pattern)
          # Reminders will be destroyed unless they're on this list
          @calendar_event_ids.push(cal_event.id)
        else
          # skip processing
          next
        end
        
        # Fetch all backpack_reminder records that we have for this calendar for this user
        @reminders = self.backpack_reminders.find(:all, :conditions => {:calendar_event_id => cal_event.id})
                
        # If we're already managing reminders for this calendar event
        if (@reminders.length > 0)
          logger.debug "Reminder cleanup started: #{cal_event.updated_at.getlocal()}:#{@reminders[0].event_updated_at}"

          # If the event has been updated since we last processed it (compare local time)
          if (cal_event.updated_at.getlocal() > @reminders[0].event_updated_at || force_recreation)
            
            # Remove all existing reminders and backpack_reminders
            @reminders.each { |rem|
              logger.debug "Destroying reminder #{rem.reminder_id}"
              @maxretry = 10
              
              begin
                @backpackapi.destroy_reminder(rem.reminder_id)
              rescue Exception => ex
                if (ex.message =~ /503/o)
                  if (@maxretry == 0)
                    errored_out("Error:Max retries reach:sitename => #{self.account.backpack_sitename}:#{ex.message}")
                  end
                  logger.warn("Warning:API request limit reached, sleeping for 5 seconds:#{ex.message}")
                  @maxretry -= 1
                  sleep 5
                  retry
                else
                  logger.error("ERROR: Couldn't remove reminder_id #{rem.reminder_id}: #{ex.message}")
                end
              else
                rem.destroy()
              end
            }
            
            logger.debug "Reminder cleanup complete"
          else
            next
          end
        end
        
        if (cal_event.occurs_at >= Time.now.getutc() && (cal_event.message =~ @reminder_pattern  || force_recreation))
          cal_event.message.scan(@reminder_pattern).each { |reminder|
          
            # Set the Time Zone appropriate time for display purposes
            @event_occurs_at = cal_event.occurs_at.in_time_zone(self.user.timezone || "UTC")
            logger.debug "Occurs at:#{cal_event.occurs_at}, Time Zone:#{self.user.timezone}, Converted:#{@event_occurs_at}"
            
            # Get the Reminder DateTime
            # Set the reminder time to 9AM if it's an all day event
            if (cal_event.all_day)
              @reminder_datetime = get_reminder_datetime(reminder, cal_event.occurs_at)
              logger.debug "Reminder set for #{@reminder_datetime}"
              if (@reminder_datetime.hour < 9)
                @reminder_datetime += (9 - @reminder_datetime.hour).hours
                logger.debug "Reminder adjusted to #{@reminder_datetime}"
              end
            else
              @reminder_datetime = get_reminder_datetime(reminder, @event_occurs_at)
            end
            
            # As long as the Reminder DateTime was set we know that the reminder tag was valid
            if (!@reminder_datetime)
              logger.info "Bad reminder tag #{reminder}"
            elsif (@reminder_datetime < Time.now().getutc())
              logger.info "Reminder Datetime (#{@reminder_datetime}) cannot be in the past"
            else
              # Build the text message for the Reminder
              @reminder_text = cal_event.message.gsub(@reminder_pattern, "").gsub(/^\s+|\s+$/o,"")
              if (cal_event.all_day)
                @reminder_text += " on #{@event_occurs_at.strftime("%a %b %d")}"
              else
                @reminder_text += " on #{@event_occurs_at.strftime("%a %b %d")} at #{@event_occurs_at.strftime('%I:%M %p')}"
              end
              
              logger.debug("Create reminder: #{@reminder_text} => #{@reminder_datetime}")
              @maxretry = 10
              
              begin
                # Make the API call to create the Reminder
                if (cal_event.all_day)
                  @created_reminder = @backpackapi.create_reminder(@reminder_text, @reminder_datetime)
                else
                  # Set the timezone to be the users timezone
                  Time.zone = self.user.timezone || "UTC"
                  
                  # create the reminder
                  @created_reminder = @backpackapi.create_reminder(@reminder_text, @reminder_datetime + Time.zone.now.utc_offset)
                  
                  # Set the timezone back to our timezone
                  Time.zone = "Central Time (US & Canada)"
                end
              rescue Exception => ex
                if (ex.message =~ /503/o)
                  if (@maxretry == 0)
                    errored_out("Error:Max retries reach:sitename => #{self.account.backpack_sitename}:#{ex.message}")
                  end
                  logger.warn("Warning:API request limit reached, sleeping for 5 seconds:#{ex.message}")
                  @maxretry -= 1
                  sleep 5
                  retry
                else
                  logger.error("Error:Backpack Reminder creation failed for AccountUser => #{self.id}:#{ex.message}")
                end
              end
              
              # Create a BackpackReminder to tie the @created_reminder to the current cal_event for this user
              self.backpack_reminders.create(
                :calendar_id => calendar.id,
                :calendar_event_id => cal_event.id,
                :account_user_id => self.id,
                :reminder_id => @created_reminder["id"].to_i,
                :event_updated_at => cal_event.updated_at.getlocal()) #Store local updated_at time
            end
          }
        end
      }
      
      # Find backpack_reminders that no longer have calendar_events and destroy them
      @reminders = self.backpack_reminders.find(:all, :conditions => {:calendar_id => calendar.id})
      
      @reminders.each { |rem|
        if (!@calendar_event_ids.include?(rem.calendar_event_id))
          logger.debug "Destroying reminder #{rem.reminder_id}"
          @maxretry = 10
          
          begin
            @backpackapi.destroy_reminder(rem.reminder_id)
          rescue Exception => ex
            if (ex.message =~ /record not found/io)
              rem.destroy()
            elsif (ex.message =~ /503/o)
              if (@maxretry == 0)
                errored_out("Error:Max retries reach:sitename => #{self.account.backpack_sitename}:#{ex.message}")
              end
              logger.warn("Warning:API request limit reached, sleeping for 5 seconds:#{ex.message}")
              @maxretry -= 1
              sleep 5
              retry
            else
              logger.info("ERROR:UserId=>#{self.user_id}, ReminderId=>#{rem.reminder_id}:Couldn't remove Backpack reminder:#{ex.message}")              
            end
          else
            rem.destroy()
          end
        end
      }
    }
    
    @my_account_user = AccountUser.find(:first, :conditions => {:user_id => self.user_id, :account_id => self.account_id})
    @my_account_user.processed_at = Time.now + Time.now.utc_offset
    @my_account_user.errored_at = nil
    @my_account_user.save!()
    
    logger.info "User #{self.user.full_name} processed at #{Time.now}"
  end
  
  def create_reminder(reminder_text, reminder_datetime)
    if (is_on_error())
      return false
    end
    
    @retry = true
    
    begin
      @backpackapi = backpack_connection()
      @return = @backpackapi.create_reminder(reminder_text, reminder_datetime)#.strftime('%m/%d/%Y %H:%M:%S'))
    rescue Exception => ex
      if (ex.message =~ /Backpack: File not found/o)
        switch_ssl()
        if (@retry)
          @retry = false
          retry
        else
          errored_out("Error:SSL and non-SSL connections to Backpack have failed:sitename => #{self.account.backpack_sitename}:#{ex.message}")
        end
      elsif (ex.message =~ /403/o)
        errored_out("Error:API Key is probably invalid:sitename => #{self.account.backpack_sitename}:#{ex.message}")
      else
        logger.error ex.message
        return false
      end
    end
    
    mark_out_of_error()
    @return
  end
  
  def get_reminder_datetime(reminder, event_occurs_at)
    @amount_of_time = reminder[reminder.index(/\d/)..reminder.rindex(/\d/)].to_i
    initialize_regex()
    
    case
      when reminder.match(@regex_year)
        event_occurs_at - @amount_of_time.year
      when reminder.match(@regex_month)
        event_occurs_at - @amount_of_time.month
      when reminder.match(@regex_week)
        event_occurs_at - @amount_of_time.week
      when reminder.match(@regex_day)
        event_occurs_at - @amount_of_time.day
      when reminder.match(@regex_hour)
        event_occurs_at - @amount_of_time.hour
      when reminder.match(@regex_minute)
        event_occurs_at - @amount_of_time.minute
      else
        false
    end
  end
  
  def self.next_for_reminders(amount_to_fetch = nil)
    if (amount_to_fetch == nil)
      AccountUser.find(:all, :joins => "INNER JOIN accounts ON accounts.id = account_users.account_id INNER JOIN plans ON accounts.plan_id = plans.id", :conditions => "(processed_at IS NULL OR TIME_TO_SEC(TIMEDIFF(NOW(), processed_at)) >= plans.update_interval) AND LENGTH(api_token) > 0 AND accounts.next_bill_date >= DATE(NOW()) AND (errored_at IS NULL OR MINUTE(errored_at) = MINUTE(NOW()))")
    else
      AccountUser.find(:all, :joins => "INNER JOIN accounts ON accounts.id = account_users.account_id INNER JOIN plans ON accounts.plan_id = plans.id", :conditions => "(processed_at IS NULL OR TIME_TO_SEC(TIMEDIFF(NOW(), processed_at)) >= plans.update_interval) AND LENGTH(api_token) > 0 AND accounts.next_bill_date >= DATE(NOW()) AND (errored_at IS NULL OR MINUTE(errored_at) = MINUTE(NOW()))", :limit => amount_to_fetch)
    end
  end
  
  private
  
  def is_on_error()
    if (self.errored_at == nil)
      false
    elsif (self.errored_at.min == Time.now.min)
      false
    else
      true
    end
  end
  
  def mark_out_of_error()
    # Find me and set my errored_at time
    @my_account_user = AccountUser.find(:first, :conditions => {:user_id => self.user_id, :account_id => self.account_id})
    @my_account_user.errored_at = nil
    @my_account_user.save!()
  end
  
  def errored_out(message)
    # Find me and set my errored_at time
    @my_account_user = AccountUser.find(:first, :conditions => {:user_id => self.user_id, :account_id => self.account_id})
    @my_account_user.errored_at = Time.now + Time.now.utc_offset
    @my_account_user.save!()
    
    logger.error message
    return false
  end
  
  def switch_ssl()
    self.account.ssl_required = !self.account.ssl_required
    self.account.save()
    logger.info "Connection ssl_required changed to #{self.account.ssl_required} for account #{self.account_id}."
  end
  
  def calendar_connection()
    @http = (self.account.ssl_required) ? "https" : "http"
    Backpack::Calendar.new("#{@http}://#{self.account.backpack_sitename}.backpackit.com", self.api_token)
  end
  
  def backpack_connection()
    Backpack::Backpack.new(self.account.backpack_sitename, self.api_token, self.account.ssl_required)
  end
  
  def initialize_regex()
    @regex_year = Regexp.new(/\#rem\d+(years|year|yrs|yr)\s?/io)
    @regex_month = Regexp.new(/\#rem\d+(months|month|mon|mo)\s?/io)
    @regex_week = Regexp.new(/\#rem\d+(weeks|week|wks|wk|w)\s?/io)
    @regex_day = Regexp.new(/\#rem\d+(days|day|dys|dy|d)\s?/io)
    @regex_hour = Regexp.new(/\#rem\d+(hours|hour|hrs|hr|h)\s?/io)
    @regex_minute = Regexp.new(/\#rem\d+(minutes|minute|mins|min|m\s?)/io)
    @regex_all = Regexp.union(@regex_year, @regex_month, @regex_week, @regex_day, @regex_hour, @regex_minute)
  end
end